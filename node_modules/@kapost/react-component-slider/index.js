'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash.debounce');

var _lodash2 = _interopRequireDefault(_lodash);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var node = _propTypes2.default.node,
    func = _propTypes2.default.func;


var arrowWidth = 20;

var ComponentSlider = function (_React$Component) {
  _inherits(ComponentSlider, _React$Component);

  function ComponentSlider(props) {
    _classCallCheck(this, ComponentSlider);

    var _this = _possibleConstructorReturn(this, (ComponentSlider.__proto__ || Object.getPrototypeOf(ComponentSlider)).call(this, props));

    _this.resetMargin = function () {
      console.log(_this.slider);
      if (_this.slider && _this.sliderContent) {
        _this.setState({ marginLeft: 0 });
      }
    };

    _this.handleLeftClicked = function () {
      var currentMarginLeft = _this.state.marginLeft;
      var sliderWidth = _this.slider.offsetWidth;
      var marginLeft = void 0;

      if (currentMarginLeft > sliderWidth) {
        marginLeft = currentMarginLeft - sliderWidth;
      } else {
        marginLeft = 0;
      }

      _this.setState({ marginLeft: marginLeft });
    };

    _this.handleRightClicked = function () {
      var currentMarginLeft = _this.state.marginLeft;
      var sliderWidth = _this.slider.offsetWidth;
      var contentWidth = _this.sliderContent.offsetWidth;
      var remainingWidth = contentWidth - (sliderWidth - arrowWidth) - currentMarginLeft;
      var marginLeft = void 0;

      if (remainingWidth > 0) {
        if (remainingWidth <= sliderWidth) {
          marginLeft = currentMarginLeft + remainingWidth;
        } else {
          marginLeft = currentMarginLeft + sliderWidth;
        }
      } else {
        marginLeft = currentMarginLeft;
      }

      _this.setState({ marginLeft: marginLeft });
    };

    _this.handleResize = function () {
      _this.updateFn = _this.updateFn || (0, _lodash2.default)(function () {
        _this.resetMargin();
      }, 200);
      return _this.updateFn;
    };

    _this.renderLeftArrow = function () {
      if (_this.state.marginLeft !== 0) {
        return _react2.default.createElement(
          'button',
          { className: 'caret caret-left', onClick: _this.handleLeftClicked },
          _this.props.renderLeftArrow()
        );
      }
      return null;
    };

    _this.renderRightArrow = function () {
      var currentMarginLeft = _this.state.marginLeft;
      var sliderWidth = _this.slider ? _this.slider.offsetWidth : 0;
      var contentWidth = _this.sliderContent ? _this.sliderContent.offsetWidth : 0;
      var remainingWidth = contentWidth - (sliderWidth - arrowWidth) - currentMarginLeft;

      if (remainingWidth > 0) {
        return _react2.default.createElement(
          'button',
          { className: 'caret caret-right', onClick: _this.handleRightClicked },
          _this.props.renderRightArrow()
        );
      }
      return null;
    };

    _this.render = function () {
      return _react2.default.createElement(
        'div',
        { className: 'component-slider', ref: _this.setSliderRef },
        _this.renderLeftArrow(),
        _react2.default.createElement(
          'div',
          { className: 'slider-container' },
          _react2.default.createElement(
            'div',
            {
              className: 'slider-content',
              ref: _this.setSliderContentRef,
              style: { marginLeft: '-' + _this.state.marginLeft + 'px' }
            },
            _this.props.children
          )
        ),
        _this.renderRightArrow()
      );
    };

    _this.setSliderRef = function (element) {
      _this.slider = element;
    };
    _this.setSliderContentRef = function (element) {
      _this.sliderContent = element;
    };

    _this.state = {
      marginLeft: 0
    };
    return _this;
  }

  _createClass(ComponentSlider, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      window.addEventListener('resize', this.handleResize());
      this.resetMargin();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('resize', this.handleResize());
    }

    //   slider width
    //        |  content width
    //        v        |
    // ~~~~~~~~~~~~~~  v
    // ~~~~~~~~~~~~~~~~~~~~
    // ______________
    // |             |----|
    // |             |

    // if we are currently paginated to the right less than / equal the width of
    // the slider container, then we can paginate back left all the way;
    // otherwise there is not enough space, so we only shift left the amount of
    // the width of the slider container

    // if the amount of width left is less than / equal the width of the slider
    // container, we can shift left enough to show the entire remaining width;
    // otherwise we shift the length of the slider container; note the extra
    // 20px to account for margins for the arrows

    // Show left arrow if we are tabbed over at all (margin left not 0)

    // When the 'content' of a slider exceeds the width of the slider itself
    // the right arrow should show; remaining width is the current width of
    // the content minus the width of the slider container

  }]);

  return ComponentSlider;
}(_react2.default.Component);

ComponentSlider.displayName = 'ComponentSlider';
ComponentSlider.propTypes = {
  children: node.isRequired,
  renderLeftArrow: func,
  renderRightArrow: func
};
ComponentSlider.defaultProps = {
  renderLeftArrow: function renderLeftArrow() {
    return _react2.default.createElement(
      'span',
      null,
      '\u2190'
    );
  },
  renderRightArrow: function renderRightArrow() {
    return _react2.default.createElement(
      'span',
      null,
      '\u2192'
    );
  }
};
exports.default = ComponentSlider;
